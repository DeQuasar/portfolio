name: Deploy to Cloudflare Pages

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-preview'

permissions:
  contents: write
  deployments: write

concurrency:
  group: cloudflare-pages-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      CLOUDFLARE_PROJECT_NAME: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
      IS_PREVIEW: ${{ contains(github.ref, '-preview') }}
      CF_DEPLOY_BRANCH: ${{ contains(github.ref, '-preview') && 'preview' || 'main' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clean Nuxt content cache
        run: rm -rf .data

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Run unit tests with coverage
        env:
          ENABLE_BROWSER_TESTS: 'false'
        run: pnpm test:coverage

      - name: Generate static site
        run: pnpm generate

      - name: Run responsive UI suite (desktop/tablet/mobile)
        env:
          ENABLE_BROWSER_TESTS: 'true'
          PLAYWRIGHT_NODE_VERSION: '22.20.0'
        run: pnpm test:ui:container

      - name: Run Playwright E2E suite
        env:
          SKIP_GENERATE: '1'
        run: pnpm test:e2e:ci

      - name: Run Lighthouse performance checks
        env:
          SKIP_GENERATE: '1'
        run: pnpm test:performance

      - name: Deploy via Wrangler Direct Upload
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: 3.81.0
          packageManager: pnpm
          command: >
            pages deploy .output/public
            --project-name=${{ env.CLOUDFLARE_PROJECT_NAME }}
            --branch=${{ env.CF_DEPLOY_BRANCH }}
            --commit-hash=${{ github.sha }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Promote preview alias
        if: ${{ env.IS_PREVIEW == 'true' }}
        env:
          CF_PAGES_DEPLOYMENT_ID: ${{ steps.deploy.outputs.pages-deployment-id }}
        run: |
          cat <<'EOF' > alias.json
          { "alias": "preview" }
          EOF

          curl -sS -X PUT \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data @alias.json \
            "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/${{ env.CLOUDFLARE_PROJECT_NAME }}/deployments/${CF_PAGES_DEPLOYMENT_ID}/alias" \
            -o alias-response.json

          python3 - <<'PY'
import json,sys
data=json.load(open('alias-response.json'))
if not data.get('success'):
    print('Failed to alias preview deployment:', json.dumps(data), file=sys.stderr)
    sys.exit(1)
PY

          curl -sS -X POST \
            "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/${{ env.CLOUDFLARE_PROJECT_NAME }}/deployments/${CF_PAGES_DEPLOYMENT_ID}/purge-cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_all":true}' >/dev/null

      - name: Promote production alias
        if: ${{ env.IS_PREVIEW != 'true' }}
        env:
          CF_PAGES_DEPLOYMENT_ID: ${{ steps.deploy.outputs.pages-deployment-id }}
        run: |
          cat <<'EOF' > alias.json
          { "alias": "production" }
          EOF

          curl -sS -X PUT \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data @alias.json \
            "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/${{ env.CLOUDFLARE_PROJECT_NAME }}/deployments/${CF_PAGES_DEPLOYMENT_ID}/alias" \
            -o alias-response.json

          python3 - <<'PY'
import json,sys
data=json.load(open('alias-response.json'))
if not data.get('success'):
    print('Failed to alias production deployment:', json.dumps(data), file=sys.stderr)
    sys.exit(1)
PY

          curl -sS -X POST \
            "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/${{ env.CLOUDFLARE_PROJECT_NAME }}/deployments/${CF_PAGES_DEPLOYMENT_ID}/purge-cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_all":true}' >/dev/null

      - name: Publish GitHub release notes
        if: ${{ env.IS_PREVIEW != 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
